name: Docker Build Matrices

# This job generates build matrices using base images built two hours earlier

on: 
  schedule:
    - cron: 0 3 * * *

  # On pull request we test updates to images
  pull_request: []
 
  # On push to main we build and deploy images
  push: 
    branches:
      - main

jobs:
  generate:
    runs-on: ubuntu-latest
    outputs:
      dockerbuild_matrix: ${{ steps.dockerbuild.outputs.dockerbuild_matrix }}
    steps:
    - name: Checkout Actions Repository
      uses: actions/checkout@v2

    - name: Generate Build Matrix
      uses: vsoch/uptodate@main
      id: dockerbuild
      with: 
        root: .
        parser: dockerbuild

  # Allows us to preview/see the matrix
  view:
    needs:
      - generate
    runs-on: ubuntu-latest
    steps:
      - name: View Docker Build Matrix Result
        env:
          result: ${{ needs.generate.outputs.dockerbuild_matrix }}
        run: echo ${result}

  build:
    needs:
      - generate
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        result: ${{ fromJson(needs.generate.outputs.dockerbuild_matrix) }}

    name: "Build ${{ matrix.result.name }}"
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: GHCR Login
      if: (github.event_name != 'pull_request')
      uses: docker/login-action@v1 
      with:
        registry: ghcr.io
        username: ${{ secrets.GHCR_USERNAME }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Make Space For Build
      run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc

    # This currently has a lot of extra prints for debugging
    - name: Build ${{ matrix.result.dockerfile }}
      id: builder
      env:
        buildargs: ${{ matrix.result.buildargs }}
      run: |
        basedir=$(dirname ${{ matrix.result.filename }})
        printf "Base directory is ${basedir}\n"
        dockerfile=$(basename ${{ matrix.result.filename }})
        printf "Dockerfile basename is ${dockerfile}\n"
        # Generate command for build args, removing outer quotes
        keys=$(jq '.|keys[]' <<< "$buildargs")
        for key in $keys; do
            key=$(echo "$key" | tr -d '"')
            value=$(jq ".$key" <<< "$buildargs" | tr -d '"')
            echo "--build-arg ${key}=${value}"
        done

    - name: Deploy Container
      if: (github.event_name != 'pull_request')
      env:
        container: ${{ steps.builder.outputs.container }}
      run: |
        docker images
        printf "docker push ${{ env.container }}\n"
        docker push ${{ env.container }}
